pragma solidity ^0.8.0;

contract FinanceManager {
    struct User {
        uint256 balance;
    }
    
    mapping(address => User) private users;

    event Deposit(address indexed user, uint256 amount);
    event Withdrawal(address indexed user, uint256 amount);

    modifier validAmount(uint256 amount) {
        require(amount > 0, "Amount must be greater than 0");
        _;
    }

    function deposit() external payable validAmount(msg.value) {
        users[msg.sender].balance += msg.value;
        emit Deposit(msg.sender, msg.value);
    }

    function getBalance(address user) external view returns (uint256) {
        return users[user].balance;
    }

    function withdraw(uint256 amount) external {
        require(amount > 0, "Amount must be greater than 0");
        require(users[msg.sender].balance >= amount, "Insufficient balance");
        
        payable(msg.sender).transfer(amount);
        users[msg.sender].balance -= amount;
        emit Withdrawal(msg.sender, amount);
    }
}
